<?php

namespace NaxCrmBundle\Repository;

use NaxCrmBundle\Entity\Client;
use NaxCrmBundle\Entity\Department;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use NaxCrmBundle\Entity\Deposit;
use NaxCrmBundle\Entity\Manager;
use Doctrine\ORM\Query\Expr;

/**
 * DepartmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepartmentRepository extends NestedTreeRepository
{
    public function getChildsIdList(Department $department)
    {

        $qb = $this->createQueryBuilder('t', 't.id')
            ->select('t.id')
            ->where('t.lft > :lft')
            ->andWhere('t.rgt < :rgt')
            ->andWhere('t.root = :root')
            ->setParameters([
                ':lft' => $department->getLft(),
                ':rgt' => $department->getRgt(),
                ':root' => $department->getRoot()
            ])
        ;
        return array_keys($qb->getQuery()->getResult());
    }

    public function getDepartmentBranch(Department $parent)
    {
        $qb = $this->createQueryBuilder('t');
        if(!$this->_em->getFilters()->isEnabled('softdeleteable')){
            $this->_em->getFilters()->enable('softdeleteable');
        }
        $qb->select('t')
            ->where('t.lft >= :lft')
            ->andWhere('t.rgt <= :rgt')
            ->andWhere('t.root = :root')
            // ->andWhere('t.deletedAt IS NULL')
            ->indexBy('t','t.id')
            ->setParameters([
                ':lft' => $parent->getLft(),
                ':rgt' => $parent->getRgt(),
                ':root' => $parent->getRoot()
            ]);
        $result = $qb->getQuery()->getArrayResult();
        $departmentIds = array_keys($result);

        $qb = $this->_em->createQueryBuilder();
        $qb->select(
            'm',
            'GROUP_CONCAT(r.id) aclRoles'
        )
            ->from(Manager::class(), 'm')
            ->leftJoin("m.aclRoles", 'r')
            ->where('m.departmentId IN(:departmentIds) AND m.blocked = 0')
            ->indexBy('m', 'm.id')
            ->groupBy('m.id')
            ->setParameter('departmentIds', $departmentIds);
        $managers = $qb->getQuery()->getArrayResult();
        foreach ($managers as $manager) {
            $manager = array_merge(reset($manager), $manager);
            unset($manager[0]);
            $result[$manager['departmentId']]['managers'][] = $manager;
        }
        return array_values($result);
    }

    public function getDepartmentTree(Department $parent)
    {
        $qb = $this->createQueryBuilder('t');
        if(!$this->_em->getFilters()->isEnabled('softdeleteable')){
            $this->_em->getFilters()->enable('softdeleteable');
        }
        $qb->select('t')
            ->where('t.lft >= :lft')
            ->andWhere('t.rgt <= :rgt')
            ->andWhere('t.root = :root')
            // ->andWhere('t.deletedAt IS NULL')
            ->indexBy('t','t.id')
            ->setParameters([
                ':lft' => $parent->getLft(),
                ':rgt' => $parent->getRgt(),
                ':root' => $parent->getRoot()
            ]);
        $result = $qb->getQuery()->getArrayResult();
        $departmentIds = array_keys($result);

        $qb = $this->_em->createQueryBuilder();
        $qb->select(
            'm',
            'COUNT(DISTINCT cl.id) as clients',
            'COUNT(DISTINCT l.id) as leads',
            'COUNT(c.id) as calls',
            'GROUP_CONCAT(r.id) aclRoles'
        )
            ->from(Manager::class(), 'm')
            ->leftJoin('m.leads', 'l')
            ->leftJoin('l.comments', 'c')
            ->leftJoin('m.clients', 'cl')
            ->leftJoin("m.aclRoles", 'r')
            ->where('m.departmentId IN(:departmentIds) AND m.blocked = 0')
            ->indexBy('m', 'm.id')
            ->groupBy('m.id')
            ->setParameter('departmentIds', $departmentIds);
        $managers = $qb->getQuery()->getArrayResult();

        $qb = $this->_em->createQueryBuilder();
        $qb->select('c.managerId, SUM(d.amount) as depositsum')
            ->from(Client::class(), 'c')
            ->join('c.deposits', 'd')
            ->where('c.managerId IN (:managerIds)')
            ->andWhere('d.status = :status')
            ->groupBy('c.managerId')
            ->indexBy('c', 'c.managerId')
            ->setParameters([
                'managerIds' => array_keys($managers),
                'status' => Deposit::STATUS_PROCESSED
            ]);
        $deposits = $qb->getQuery()->getArrayResult();
        foreach ($managers as $manager) {
            $manager = array_merge(reset($manager), $manager);
            unset($manager[0]);
            $manager['deposits'] = empty($deposits[$manager['id']]['depositsum'])
                ? 0 : $deposits[$manager['id']]['depositsum'];
            $result[$manager['departmentId']]['managers'][] = $manager;
        }
        return array_values($result);
    }
}
