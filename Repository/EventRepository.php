<?php

namespace NaxCrmBundle\Repository;

use NaxCrmBundle\Entity\Client;
use NaxCrmBundle\Entity\Event;
use NaxCrmBundle\Entity\Lead;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends AbstractEntityRepository
{

    public function getOwn($managerId)
    {
        $filters = [
            'managerId' => $managerId,
            'start' => (new \DateTime())->format('Y-m-d 00:00:00'),
            'end' => (new \DateTime())->format('Y-m-d 23:59:59'),
            'statusUnread' => Event::STATUS_UNREAD
        ];
        $qb = $this->createQueryBuilder('e')
            ->select(
                'e.id',
                'e.message',
                'e.title',
                'e.objectType',
                'e.objectId',
                "DATE_FORMAT(e.created, '%Y-%m-%d %H:%i:%s') created"
            );

        $qb->andWhere('e.managerId = :managerId')
            ->andWhere('e.timeFollowup IS NULL')
            ->andWhere('e.created >= :start')
            ->andWhere('e.created <= :end')
            ->andWhere('e.status = :statusUnread')
            ->setParameters($filters);

        // \NaxCrmBundle\Debug::$messages[]=[$qb->getQuery()->getSQL(), $filters];

        return $qb->getQuery()->getResult();
    }

    public function getList($params)
    {
        $filters = [];
        $order = [];
        if (isset($params['filters'])) $filters = $params['filters'];
        if (isset($params['order'])) $order = $params['order'];

        $qb = $this->createQueryBuilder('e')
            ->select('COUNT(e.id)');

        $pre_filters = [
            // 'managerIds'    => ['table' => 'e', 'field' => 'managerId',],
            'statusIds'     => ['table' => 'e', 'field' => 'status',],
            'objectTypes'   => ['table' => 'e', 'field' => 'objectType',],
            'objectIds'     => ['table' => 'e', 'field' => 'objectId',],
            'actual'        => ['table' => 'e', 'field' => 'timeFollowup', 'op' => '>', 'value' => '0'],
            'system'        => ['table'=>'e',   'field' => 'timeFollowup', 'op'=>'IS',  'value' => 'NULL'],
            'follow_up'     => ['table'=>'e',   'field' => 'timeFollowup', 'op'=>'IS',  'value' => 'NOT NULL'],
        ];

        $filters_array = [
            'id'            => ['table' => 'e','type' => 'integer',],
            'objectId'      => ['table' => 'e','type' => 'integer',],
            'message'       => ['table' => 'e','type' => 'string',],
            'title'         => ['table' => 'e','type' => 'string',],
            'created'       => ['table' => 'e','type' => 'daterange',],
            'timeFollowup'  => ['table' => 'e','type' => 'daterange',],
            'managerId'     => ['table' => 'e','type' => 'multilist',],
            'objectType'    => ['table' => 'e','type' => 'multilist',],
            'status'        => ['table' => 'e','type' => 'multilist',],
        ];

        if (isset($this->preFilters['isHead'])) {
            //if isHead was passed without departmentIds
            if (!isset($this->preFilters['departmentIds'])) {
                throw new \Exception('Is head prefilter has set without departmentIds');
            }
            $qb->join('e.manager', 'm');
            $pre_filters['departmentIds'] = ['table' => 'm', 'field' => 'departmentId',];
        }
        if (!empty($this->preFilters['managerIds'])) {
            if(count($this->preFilters['managerIds'])==1){
                $managerIds = $this->preFilters['managerIds'][0];
                $qb->andWhere("e.managerId IN (:managerIds) OR e.participants LIKE '|{$managerIds}|' OR e.managerId IS NULL")->setParameter('managerIds', $this->preFilters['managerIds']);
            }
            else{//NOTICE: participants ignored
                $qb->andWhere("e.managerId IN (:managerIds) OR e.managerId IS NULL")->setParameter('managerIds', $this->preFilters['managerIds']);
            }
        }

        $this->setupPreFilters($pre_filters, $qb);
        $total = $qb->getQuery()->getSingleScalarResult();

        $this->setMultiValues($filters_array, $qb);
        $this->buildFilters($filters_array, $filters, $qb);

        $qb->select('COUNT(e.id) filtered');
        $count = $qb->getQuery()->getScalarResult()[0]['filtered'];

        $this->setPagination($params, $qb);

        $types = [
            'event' => Event::TYPE_EVENT,
            'follow_up' => Event::TYPE_FOLLOW_UP,
        ];
        $qb->select(
            'e.id',
            'e.managerId',
            'e.message',
            'e.title',
            'e.status',
            "COALESCE(e.objectId, '') as objectId",
            'e.objectType',
            "IF(e.timeFollowup IS NULL, '{$types['event']}', '{$types['follow_up']}') type",
            "COALESCE(DATE_FORMAT(e.timeFollowup, '%Y-%m-%d %H:%i:%s'), '') timeFollowup",
            "DATE_FORMAT(e.created, '%Y-%m-%d %H:%i:%s') created"
        );

        $sort_array = $filters_array;

        $this->setOrder($order, $sort_array, $qb);

        \NaxCrmBundle\Debug::$messages[]=[$qb->getQuery()->getSQL(), $filters, $this->preFilters];
        $data = $qb->getQuery()->getResult();

        return [
            'total'     => (int) $total,
            'filtered'  => (int) $count,
            'filters'   => $this->genFilters($filters_array),
            'rows'      => $data,
        ];
    }
}
